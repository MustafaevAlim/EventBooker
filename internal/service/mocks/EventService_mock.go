// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"EventBooker/internal/model"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockEventService creates a new instance of MockEventService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventService {
	mock := &MockEventService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEventService is an autogenerated mock type for the EventService type
type MockEventService struct {
	mock.Mock
}

type MockEventService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventService) EXPECT() *MockEventService_Expecter {
	return &MockEventService_Expecter{mock: &_m.Mock}
}

// CreateEvent provides a mock function for the type MockEventService
func (_mock *MockEventService) CreateEvent(ctx context.Context, e model.EventInCreate) error {
	ret := _mock.Called(ctx, e)

	if len(ret) == 0 {
		panic("no return value specified for CreateEvent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.EventInCreate) error); ok {
		r0 = returnFunc(ctx, e)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEventService_CreateEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEvent'
type MockEventService_CreateEvent_Call struct {
	*mock.Call
}

// CreateEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - e model.EventInCreate
func (_e *MockEventService_Expecter) CreateEvent(ctx interface{}, e interface{}) *MockEventService_CreateEvent_Call {
	return &MockEventService_CreateEvent_Call{Call: _e.mock.On("CreateEvent", ctx, e)}
}

func (_c *MockEventService_CreateEvent_Call) Run(run func(ctx context.Context, e model.EventInCreate)) *MockEventService_CreateEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.EventInCreate
		if args[1] != nil {
			arg1 = args[1].(model.EventInCreate)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventService_CreateEvent_Call) Return(err error) *MockEventService_CreateEvent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEventService_CreateEvent_Call) RunAndReturn(run func(ctx context.Context, e model.EventInCreate) error) *MockEventService_CreateEvent_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockEventService
func (_mock *MockEventService) GetByID(ctx context.Context, id int) (model.EventInResponse, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 model.EventInResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (model.EventInResponse, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) model.EventInResponse); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(model.EventInResponse)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEventService_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockEventService_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockEventService_Expecter) GetByID(ctx interface{}, id interface{}) *MockEventService_GetByID_Call {
	return &MockEventService_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockEventService_GetByID_Call) Run(run func(ctx context.Context, id int)) *MockEventService_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventService_GetByID_Call) Return(eventInResponse model.EventInResponse, err error) *MockEventService_GetByID_Call {
	_c.Call.Return(eventInResponse, err)
	return _c
}

func (_c *MockEventService_GetByID_Call) RunAndReturn(run func(ctx context.Context, id int) (model.EventInResponse, error)) *MockEventService_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetCountEvent provides a mock function for the type MockEventService
func (_mock *MockEventService) GetCountEvent(ctx context.Context) (int, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCountEvent")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (int, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEventService_GetCountEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCountEvent'
type MockEventService_GetCountEvent_Call struct {
	*mock.Call
}

// GetCountEvent is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockEventService_Expecter) GetCountEvent(ctx interface{}) *MockEventService_GetCountEvent_Call {
	return &MockEventService_GetCountEvent_Call{Call: _e.mock.On("GetCountEvent", ctx)}
}

func (_c *MockEventService_GetCountEvent_Call) Run(run func(ctx context.Context)) *MockEventService_GetCountEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockEventService_GetCountEvent_Call) Return(n int, err error) *MockEventService_GetCountEvent_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockEventService_GetCountEvent_Call) RunAndReturn(run func(ctx context.Context) (int, error)) *MockEventService_GetCountEvent_Call {
	_c.Call.Return(run)
	return _c
}

// GetListEvents provides a mock function for the type MockEventService
func (_mock *MockEventService) GetListEvents(ctx context.Context, req model.EventGetRequest) ([]model.EventInResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetListEvents")
	}

	var r0 []model.EventInResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.EventGetRequest) ([]model.EventInResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.EventGetRequest) []model.EventInResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.EventInResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.EventGetRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEventService_GetListEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListEvents'
type MockEventService_GetListEvents_Call struct {
	*mock.Call
}

// GetListEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - req model.EventGetRequest
func (_e *MockEventService_Expecter) GetListEvents(ctx interface{}, req interface{}) *MockEventService_GetListEvents_Call {
	return &MockEventService_GetListEvents_Call{Call: _e.mock.On("GetListEvents", ctx, req)}
}

func (_c *MockEventService_GetListEvents_Call) Run(run func(ctx context.Context, req model.EventGetRequest)) *MockEventService_GetListEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.EventGetRequest
		if args[1] != nil {
			arg1 = args[1].(model.EventGetRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventService_GetListEvents_Call) Return(eventInResponses []model.EventInResponse, err error) *MockEventService_GetListEvents_Call {
	_c.Call.Return(eventInResponses, err)
	return _c
}

func (_c *MockEventService_GetListEvents_Call) RunAndReturn(run func(ctx context.Context, req model.EventGetRequest) ([]model.EventInResponse, error)) *MockEventService_GetListEvents_Call {
	_c.Call.Return(run)
	return _c
}
