// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"EventBooker/internal/model"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function for the type MockUserService
func (_mock *MockUserService) CreateUser(ctx context.Context, u model.UserInCreate) (string, error) {
	ret := _mock.Called(ctx, u)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserInCreate) (string, error)); ok {
		return returnFunc(ctx, u)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserInCreate) string); ok {
		r0 = returnFunc(ctx, u)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.UserInCreate) error); ok {
		r1 = returnFunc(ctx, u)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserService_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - u model.UserInCreate
func (_e *MockUserService_Expecter) CreateUser(ctx interface{}, u interface{}) *MockUserService_CreateUser_Call {
	return &MockUserService_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, u)}
}

func (_c *MockUserService_CreateUser_Call) Run(run func(ctx context.Context, u model.UserInCreate)) *MockUserService_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.UserInCreate
		if args[1] != nil {
			arg1 = args[1].(model.UserInCreate)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserService_CreateUser_Call) Return(s string, err error) *MockUserService_CreateUser_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockUserService_CreateUser_Call) RunAndReturn(run func(ctx context.Context, u model.UserInCreate) (string, error)) *MockUserService_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetCountUsers provides a mock function for the type MockUserService
func (_mock *MockUserService) GetCountUsers(ctx context.Context) (int, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCountUsers")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (int, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_GetCountUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCountUsers'
type MockUserService_GetCountUsers_Call struct {
	*mock.Call
}

// GetCountUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserService_Expecter) GetCountUsers(ctx interface{}) *MockUserService_GetCountUsers_Call {
	return &MockUserService_GetCountUsers_Call{Call: _e.mock.On("GetCountUsers", ctx)}
}

func (_c *MockUserService_GetCountUsers_Call) Run(run func(ctx context.Context)) *MockUserService_GetCountUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserService_GetCountUsers_Call) Return(n int, err error) *MockUserService_GetCountUsers_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockUserService_GetCountUsers_Call) RunAndReturn(run func(ctx context.Context) (int, error)) *MockUserService_GetCountUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetListUsers provides a mock function for the type MockUserService
func (_mock *MockUserService) GetListUsers(ctx context.Context, req model.UserGetRequest) ([]model.UserInResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetListUsers")
	}

	var r0 []model.UserInResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserGetRequest) ([]model.UserInResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserGetRequest) []model.UserInResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.UserInResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.UserGetRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_GetListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListUsers'
type MockUserService_GetListUsers_Call struct {
	*mock.Call
}

// GetListUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - req model.UserGetRequest
func (_e *MockUserService_Expecter) GetListUsers(ctx interface{}, req interface{}) *MockUserService_GetListUsers_Call {
	return &MockUserService_GetListUsers_Call{Call: _e.mock.On("GetListUsers", ctx, req)}
}

func (_c *MockUserService_GetListUsers_Call) Run(run func(ctx context.Context, req model.UserGetRequest)) *MockUserService_GetListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.UserGetRequest
		if args[1] != nil {
			arg1 = args[1].(model.UserGetRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserService_GetListUsers_Call) Return(userInResponses []model.UserInResponse, err error) *MockUserService_GetListUsers_Call {
	_c.Call.Return(userInResponses, err)
	return _c
}

func (_c *MockUserService_GetListUsers_Call) RunAndReturn(run func(ctx context.Context, req model.UserGetRequest) ([]model.UserInResponse, error)) *MockUserService_GetListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function for the type MockUserService
func (_mock *MockUserService) Login(ctx context.Context, req model.UserLoginRequest) (string, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserLoginRequest) (string, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserLoginRequest) string); ok {
		r0 = returnFunc(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.UserLoginRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockUserService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - req model.UserLoginRequest
func (_e *MockUserService_Expecter) Login(ctx interface{}, req interface{}) *MockUserService_Login_Call {
	return &MockUserService_Login_Call{Call: _e.mock.On("Login", ctx, req)}
}

func (_c *MockUserService_Login_Call) Run(run func(ctx context.Context, req model.UserLoginRequest)) *MockUserService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.UserLoginRequest
		if args[1] != nil {
			arg1 = args[1].(model.UserLoginRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserService_Login_Call) Return(s string, err error) *MockUserService_Login_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockUserService_Login_Call) RunAndReturn(run func(ctx context.Context, req model.UserLoginRequest) (string, error)) *MockUserService_Login_Call {
	_c.Call.Return(run)
	return _c
}
