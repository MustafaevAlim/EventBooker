// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"EventBooker/internal/model"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockBookingService creates a new instance of MockBookingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBookingService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBookingService {
	mock := &MockBookingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBookingService is an autogenerated mock type for the BookingService type
type MockBookingService struct {
	mock.Mock
}

type MockBookingService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBookingService) EXPECT() *MockBookingService_Expecter {
	return &MockBookingService_Expecter{mock: &_m.Mock}
}

// Book provides a mock function for the type MockBookingService
func (_mock *MockBookingService) Book(ctx context.Context, b model.BookingInCreate) error {
	ret := _mock.Called(ctx, b)

	if len(ret) == 0 {
		panic("no return value specified for Book")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.BookingInCreate) error); ok {
		r0 = returnFunc(ctx, b)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBookingService_Book_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Book'
type MockBookingService_Book_Call struct {
	*mock.Call
}

// Book is a helper method to define mock.On call
//   - ctx context.Context
//   - b model.BookingInCreate
func (_e *MockBookingService_Expecter) Book(ctx interface{}, b interface{}) *MockBookingService_Book_Call {
	return &MockBookingService_Book_Call{Call: _e.mock.On("Book", ctx, b)}
}

func (_c *MockBookingService_Book_Call) Run(run func(ctx context.Context, b model.BookingInCreate)) *MockBookingService_Book_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.BookingInCreate
		if args[1] != nil {
			arg1 = args[1].(model.BookingInCreate)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBookingService_Book_Call) Return(err error) *MockBookingService_Book_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBookingService_Book_Call) RunAndReturn(run func(ctx context.Context, b model.BookingInCreate) error) *MockBookingService_Book_Call {
	_c.Call.Return(run)
	return _c
}

// CancelBook provides a mock function for the type MockBookingService
func (_mock *MockBookingService) CancelBook(ctx context.Context, bookID int, eventID int, userID int) error {
	ret := _mock.Called(ctx, bookID, eventID, userID)

	if len(ret) == 0 {
		panic("no return value specified for CancelBook")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int, int) error); ok {
		r0 = returnFunc(ctx, bookID, eventID, userID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBookingService_CancelBook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelBook'
type MockBookingService_CancelBook_Call struct {
	*mock.Call
}

// CancelBook is a helper method to define mock.On call
//   - ctx context.Context
//   - bookID int
//   - eventID int
//   - userID int
func (_e *MockBookingService_Expecter) CancelBook(ctx interface{}, bookID interface{}, eventID interface{}, userID interface{}) *MockBookingService_CancelBook_Call {
	return &MockBookingService_CancelBook_Call{Call: _e.mock.On("CancelBook", ctx, bookID, eventID, userID)}
}

func (_c *MockBookingService_CancelBook_Call) Run(run func(ctx context.Context, bookID int, eventID int, userID int)) *MockBookingService_CancelBook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockBookingService_CancelBook_Call) Return(err error) *MockBookingService_CancelBook_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBookingService_CancelBook_Call) RunAndReturn(run func(ctx context.Context, bookID int, eventID int, userID int) error) *MockBookingService_CancelBook_Call {
	_c.Call.Return(run)
	return _c
}

// Confirm provides a mock function for the type MockBookingService
func (_mock *MockBookingService) Confirm(ctx context.Context, bookID int, eventID int, userID int) error {
	ret := _mock.Called(ctx, bookID, eventID, userID)

	if len(ret) == 0 {
		panic("no return value specified for Confirm")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int, int) error); ok {
		r0 = returnFunc(ctx, bookID, eventID, userID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBookingService_Confirm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Confirm'
type MockBookingService_Confirm_Call struct {
	*mock.Call
}

// Confirm is a helper method to define mock.On call
//   - ctx context.Context
//   - bookID int
//   - eventID int
//   - userID int
func (_e *MockBookingService_Expecter) Confirm(ctx interface{}, bookID interface{}, eventID interface{}, userID interface{}) *MockBookingService_Confirm_Call {
	return &MockBookingService_Confirm_Call{Call: _e.mock.On("Confirm", ctx, bookID, eventID, userID)}
}

func (_c *MockBookingService_Confirm_Call) Run(run func(ctx context.Context, bookID int, eventID int, userID int)) *MockBookingService_Confirm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockBookingService_Confirm_Call) Return(err error) *MockBookingService_Confirm_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBookingService_Confirm_Call) RunAndReturn(run func(ctx context.Context, bookID int, eventID int, userID int) error) *MockBookingService_Confirm_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUserID provides a mock function for the type MockBookingService
func (_mock *MockBookingService) GetByUserID(ctx context.Context, req model.BookingGetRequest) ([]model.BookingInResponse, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 []model.BookingInResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.BookingGetRequest) ([]model.BookingInResponse, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.BookingGetRequest) []model.BookingInResponse); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.BookingInResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.BookingGetRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBookingService_GetByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUserID'
type MockBookingService_GetByUserID_Call struct {
	*mock.Call
}

// GetByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - req model.BookingGetRequest
func (_e *MockBookingService_Expecter) GetByUserID(ctx interface{}, req interface{}) *MockBookingService_GetByUserID_Call {
	return &MockBookingService_GetByUserID_Call{Call: _e.mock.On("GetByUserID", ctx, req)}
}

func (_c *MockBookingService_GetByUserID_Call) Run(run func(ctx context.Context, req model.BookingGetRequest)) *MockBookingService_GetByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 model.BookingGetRequest
		if args[1] != nil {
			arg1 = args[1].(model.BookingGetRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBookingService_GetByUserID_Call) Return(bookingInResponses []model.BookingInResponse, err error) *MockBookingService_GetByUserID_Call {
	_c.Call.Return(bookingInResponses, err)
	return _c
}

func (_c *MockBookingService_GetByUserID_Call) RunAndReturn(run func(ctx context.Context, req model.BookingGetRequest) ([]model.BookingInResponse, error)) *MockBookingService_GetByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetCountUserBooking provides a mock function for the type MockBookingService
func (_mock *MockBookingService) GetCountUserBooking(ctx context.Context, userID int) (int, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetCountUserBooking")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (int, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBookingService_GetCountUserBooking_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCountUserBooking'
type MockBookingService_GetCountUserBooking_Call struct {
	*mock.Call
}

// GetCountUserBooking is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
func (_e *MockBookingService_Expecter) GetCountUserBooking(ctx interface{}, userID interface{}) *MockBookingService_GetCountUserBooking_Call {
	return &MockBookingService_GetCountUserBooking_Call{Call: _e.mock.On("GetCountUserBooking", ctx, userID)}
}

func (_c *MockBookingService_GetCountUserBooking_Call) Run(run func(ctx context.Context, userID int)) *MockBookingService_GetCountUserBooking_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBookingService_GetCountUserBooking_Call) Return(n int, err error) *MockBookingService_GetCountUserBooking_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockBookingService_GetCountUserBooking_Call) RunAndReturn(run func(ctx context.Context, userID int) (int, error)) *MockBookingService_GetCountUserBooking_Call {
	_c.Call.Return(run)
	return _c
}
